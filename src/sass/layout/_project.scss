$project-size: (
  "base": (
    "max-width": 350px,
    "width": 95%,
    "min-height": 150px,
    "height": 150px,
    "box-shadow": 1px 1px 2px 1px black,
    "background": hsla(270, 100%, 90%, 0.35),
  ),
  "medium": (
    "width": 100%,
    "max-width": 450px,
  ),
  "large": (
    "width": 100%,
    "max-width": 600px,
  ),
);

//* @params
//!   $prefix: name used to identify transition
//*      - format: #{$prefix}-#{$id}
//*      - ex. where 'project' is $prefix: project-on-enter, project-on-enter-active
//!   $transition-data: all attributes being set for the selector

@mixin set-transition-on-parent($prefix, $transition-data) {
  @each $id, $idAttributes in $transition-data {
    &.#{$prefix}-#{$id} {
      @debug "";
      @debug "";
      @debug ".#{prefix}-#{$id}";
      @each $attr, $attrVal in $idAttributes {
        #{$attr}: #{$attrVal};
        @debug "- #{$attr}: #{$attrVal}";
      }
    }
  }
}

@mixin anim-transition-setup {
  $transition-wrapper-duration: 1s;

  $anim-base: (
    "min-width": 80px,
    "width": 90%,
    "max-width": 320px,
  );

  $anim-active: (
    "min-width": 200px,
    "width": 20%,
    "max-width": 600px,
  );

  &.anim-enter,
  &.anim-appear {
    @include set-content($anim-base);
  }

  &.anim-enter-active,
  &.anim-appear-active {
    @include set-content($anim-active);
    transition: all $transition-wrapper-duration;
  }

  &.anim-exit {
    @include set-content($anim-active);
  }

  &.anim-exit-active {
    @include set-content($anim-base);
    transition: all $transition-wrapper-duration;
  }
}

.project {
  @include set-content(map-get($project-size, "base"));

  //TODO TESTING TRANSITION
  @include anim-transition-setup();

  margin: 0.5rem;
  padding: 1rem 1.5rem;
  border-radius: 0.25rem;
  text-align: justify;
  overflow: hidden;

  display: flex;
  flex-flow: column nowrap;
  justify-content: flex-start;
  align-items: center;
  transition: all 1s;

  &.toggled-off {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

    > * {
      white-space: inherit;
      text-overflow: inherit;
      overflow: inherit;
    }
  }

  &.toggled-on {
    height: max-content;

    > .project-data {
      white-space: normal;
      overflow: visible;
    }
  }

  > .project-data {
    //text-overflow: ellipsis;
    //overflow: hidden;
    //padding: 0.25rem 1rem;

    //flex: 1 1 90%;
    //width: 100%;
    //max-width: 600px;
    //flex: 1 1 auto;
    //transition: all 1s;
  }

  > .title,
  > .subtitle {
    margin: 0;
    padding: 0;
    margin-bottom: 0.625rem;
    width: 100%;
  }

  > .title {
    //display: none;
    //font-size: 100%;
  }

  > .subtitle {
    font-size: 90%;
  }

  > .content-toggle {
    align-self: flex-end;
    margin-top: auto;
  }

  //> .project-role {
  //}

  //> .project-desc {
  //}
}

@media only screen and (min-width: map-get($breakpoints, "medium")) {
  .project {
    @include set-content(map-get($project-size, "medium"));
  }
}

@media only screen and (min-width: map-get($breakpoints, "large")) {
  .project {
    @include set-content(map-get($project-size, "large"));
  }
}
